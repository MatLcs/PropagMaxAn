# creation of Config_RemnantSigma.txt
file.remnant = paste(dir.SPD.config,"/Config_RemnantSigma.txt",sep="")
if (remnant == "Linear") {
cat("'Linear'", file = file.remnant, sep="\n")                    #! Function f used in sdev=f(Qrc)
cat(2, file = file.remnant, append = TRUE, sep="\n")              #! Number of parameters gamma for f
cat("gamma1", file = file.remnant, append = TRUE, sep="\n")       #! Parameter Name
cat(1, file = file.remnant, append = TRUE, sep="\n")              #! Initial Guess
cat('Uniform', file = file.remnant, append = TRUE, sep="\n")      #! Prior distribution
cat(0,file =file.remnant, append = TRUE, sep=",")
cat(",",file =file.remnant, append = TRUE, sep=",")
cat(1000,file =file.remnant, append = TRUE, sep="\n")
#
cat("gamma2", file = file.remnant, append = TRUE, sep="\n")       #! Parameter Name
cat(0.1, file = file.remnant, append = TRUE, sep="\n")            #! Initial Guess
cat('Uniform', file = file.remnant, append = TRUE, sep="\n")      #! Initial Guess
cat(0,file =file.remnant, append = TRUE, sep=",")
cat(",",file =file.remnant, append = TRUE, sep=",")
cat(100,file =file.remnant, append = TRUE, sep="\n")
} else {
cat("'Constant'", file = file.remnant, sep="\n")                     #! Function f used in sdev=f(Qrc)
cat(1, file = file.remnant, append = TRUE, sep="\n")                 #! Number of parameters gamma for f
cat("gamma1", file = file.remnant, append = TRUE, sep="\n")          #! Parameter Name
cat(1, file = file.remnant, append = TRUE, sep="\n")                 #! Initial Guess
cat('Uniform', file = file.remnant, append = TRUE, sep="\n")         #! Prior distribution
cat(0,file =file.remnant, append = TRUE, sep=",")
cat(",",file =file.remnant, append = TRUE, sep=",")
cat(1000,file =file.remnant, append = TRUE, sep="\n")
}
# creation of Config_RunOptions.txt
file.run = paste(dir.SPD.config,"/Config_RunOptions.txt",sep="")
cat(".true.", file = file.run, sep="\n")                             # Do MCMC?
cat(".true.", file = file.run, append = TRUE, sep="\n")              # Do MCMC summary?
cat(".true.", file = file.run, append = TRUE, sep="\n")              # Do Residual diagnostics?
if (pred == TRUE) {
cat(".true.", file = file.run, append = TRUE, sep="\n")         # Do Predictions?
} else {
cat(".false.", file = file.run, append = TRUE, sep="\n")        # Do Predictions?
}
# creation of Config_Residuals.txt
file.residuals = paste(dir.SPD.config,"/Config_Residuals.txt",sep="")
cat('"Results_Residuals.txt"' , file =file.residuals ,sep="\n")     # Result file
# creation of Config_Summary.txt
file.summary = paste(dir.SPD.config,"/Config_Summary.txt", sep="")
cat('"Results_Summary.txt"' , file =file.summary, sep="\n")         # Result file
# creation of Config_Cooking.txt
file.cooking = paste(dir.SPD.config,"/Config_Cooking.txt", sep="")
cat('"Results_MCMC_Cooked.txt"' , file =file.cooking, sep="\n")     # Result file
cat(0.5, file =file.cooking, append = TRUE, sep="\n")               # Burn factor
cat(10, file =file.cooking, append = TRUE, sep="\n")                # Nslim
}
##write config BAM
BaRatin_SPD_config(dir.BaM = dir.bam,
dir.SPD.config = dir.spd,
dir.spd.short = paste0("SPD_",case,"/"),
pred = F,
nobs = nrow(Gau),
M = M,
remnant = remnant.err.model,
g1.prior = g1.prior, g2.prior = g2.prior,
g1.distr.type = g1.distr.type, g2.distr.type = g2.distr.type,
Ncycles = 1000,
Hmax = Hmax)
# setwd(dir.bam)
#system2(paste0(dir.BaM,"BaM_2exp_pool2.exe"))
if(RunSPD == T){system2(paste0(dir.bam,"BaM.exe"))}
rm(list=ls())
dev.off()
source("C://Users/mathieu.lucas/Desktop/PropagMaxAn/Codes/dirs.R")
# set.seed(42)
#######
####### DATA LOADING AND FORMATTING
# Data Bcr Restit
H_hor=read.csv2(paste0(dir.data,"/BcrResHorCor.csv"),header=T)
H_hor$Date = ymd_hms(H_hor$Date)
H_hor$Day = as_date(H_hor$Date)
H_hor$Time = hour(H_hor$Date)
H_hor$y = year(H_hor$Date)
# without 01-01-2021
H_hor = H_hor[-(nrow(H_hor)),]
# Data Pt Bcr
LimniPt = read.csv2(paste0(dir.data,"PtBcrJournalier.csv"))
LimniPt$Date = ymd(LimniPt$Date)
LimniPt$H = as.numeric(LimniPt$H)
#GradPt = LimniPt$H[-1] - LimniPt$H[-nrow(LimniPt)]
#######
### ERROR MODEL FITTING BASED ON BCR RESTITUTION STATION
# True daily max of bcr restit
MaxJ = aggregate(x = H_hor$H, by = list(H_hor$Day), FUN = max)
names(MaxJ) = c("day","h")
# 12h stage maxima
Midi = H_hor[which(H_hor$Time==12),c(3,2)]
# 3 stages/day maxima (7,12,18)
Three = H_hor[which(H_hor$Time==7 | H_hor$Time==12 | H_hor$Time==18),c(3,2)]
MaxThree = aggregate(x=Three$H, by = list(Three$Day), FUN=max)
names(MaxThree) = c("day","h")
# Residuals between measured and true maxima
DifMid = MaxJ$h - Midi$H
DifThree = MaxJ$h - MaxThree$h
#######
#### Annual maxima selection
#init DF
MaxARestit = data.frame(Y = unique(year(H_hor$Date)), h = NA,
Date = as.Date("1970-01-01"),Emid = NA, Ethree = NA)
#loop on all years
for(years in unique(H_hor$y)){
#indice of the max
indmax = which(H_hor$y == years)[which.max(H_hor$H[which(H_hor$y == years)])]
#stage max
MaxARestit$h[which(MaxARestit$Y == years)] = H_hor$H[indmax]
#stage day
MaxARestit$Date[which(MaxARestit$Y == years)] = H_hor$Day[indmax]
#1/d error of the max (true daily max - 12h stage)
MaxARestit$Emid[which(MaxARestit$Y == years)] = max(H_hor$H[which(H_hor$Day == H_hor$Day[indmax])]) -
H_hor$H[which(H_hor$Day == H_hor$Day[indmax])][13]
#3/d error of the max (true daily max - max(7,12,18) stage)
MaxARestit$Ethree[which(MaxARestit$Y == years)] = max(H_hor$H[which(H_hor$Day == H_hor$Day[indmax])]) -
max(H_hor$H[which(H_hor$Day == H_hor$Day[indmax])][c(8,13,19)])
}
#######
## LOGNORM or EXP fit on annual max stage errors + plot
# pdf(file = paste0(dir.plots,"FitsMaxAstage_BcrRestit.pdf"),width = 6,height = 10)
# layout(matrix(1:8, nrow = 4, ncol = 2))
xtheo = seq(0,4,0.01)
br = 20
#EXP FIT 1/D
E1 = mean(MaxARestit$Emid,na.rm=T)
lamb1 = 1/E1
hist(MaxARestit$Emid,prob = T, main = "Exponential 1/d",ylim = c(0,3),
breaks = br, xlab = "Stage error [m]")
ytheo = dexp(xtheo,lamb1);lines(xtheo, ytheo,col="deepskyblue",lwd=3)
q_theo=qexp((1:length(MaxARestit$Emid))/length(MaxARestit$Emid),lamb1)
qqplot(q_theo,MaxARestit$Emid,xlim = c(0,3),ylim=c(0,4),col="deepskyblue",ylab="Stage error [m]")
abline(a=0,b=1, col="red")
#EXP FIT 3/D
E3 = mean(MaxARestit$Ethree,na.rm=T)
lamb3 = 1/E3
hist(MaxARestit$Ethree,prob = T, main = "Exponential 3/d",ylim = c(0,15),
breaks = br,xlab = "Stage error [m]")
ytheo = dexp(xtheo,lamb3);lines(xtheo, ytheo,col="deepskyblue",lwd=3)
q_theo=qexp((1:length(MaxARestit$Ethree))/length(MaxARestit$Ethree),lamb3)
qqplot(q_theo,MaxARestit$Ethree,xlim = c(0,1),ylim=c(0,1),col="deepskyblue",ylab="Stage error [m]")
abline(a=0,b=1, col="red")
#LN FIT 1/D
mu1 = mean(log(MaxARestit$Emid)[which(log(MaxARestit$Emid)!=-Inf)])
sigma1 = sd(log(MaxARestit$Emid)[which(log(MaxARestit$Emid)!=-Inf)])
hist(MaxARestit$Emid,prob = T,ylim=c(0,3),main = "LogNorm 1/d",
breaks = br,xlab = "Stage error [m]")
ytheo = dlnorm(xtheo,mu1,sigma1)
lines(xtheo, ytheo,col="blue",lwd=3)
q_theo=qlnorm((1:length(MaxARestit$Emid))/length(MaxARestit$Emid),mu1,sigma1)
qqplot(q_theo,MaxARestit$Emid,xlim = c(0,3),ylim=c(0,4),col="blue",ylab="Stage error [m]")
abline(a=0,b=1, col="red")
#LN FIT 3/D
mu3 = mean(log(MaxARestit$Ethree)[which(log(MaxARestit$Ethree)!=-Inf)])
sigma3 = sd(log(MaxARestit$Ethree)[which(log(MaxARestit$Ethree)!=-Inf)])
hist(MaxARestit$Ethree,prob = T,ylim=c(0,15),main = "LogNorm 3/d",
breaks = br,xlab = "Stage error [m]")
ytheo = dlnorm(xtheo,mu3,sigma3)
lines(xtheo, ytheo,col="blue",lwd=3)
q_theo=qlnorm((1:length(MaxARestit$Ethree))/length(MaxARestit$Ethree),mu3,sigma3)
qqplot(q_theo,MaxARestit$Ethree,xlim = c(0,1),ylim=c(0,1),col="blue",ylab="Stage error [m]")
abline(a=0,b=1, col="red")
# dev.off()
#######
####### APPLY THE FITTED ERROR TO PT BCR ANNUAL MAX STAGES
LimniPt$y = year(LimniPt$Date)
#init matrix
nspag = 500
years = 1816:1967
NoisyLimni = matrix(ncol = nspag, nrow = length(years))
HmaxA = data.frame(y = years,Date = as.Date("1900-01-01"), H = NA)
countrec = 1
syst = rnorm(1,0,1)*(0.068/1.96)
for(i in 1 : nrow(NoisyLimni) ){
if(years[i] != 1873){
indmax = which(LimniPt$y == years[i])[which.max(LimniPt$H[which(LimniPt$y == years[i])])]
Hmax = LimniPt$H[indmax]
Dmax = LimniPt$Date[indmax]
## annuaire hydrologique 1873
} else {Hmax = 5.7; Dmax = as.Date("1873-03-19")}
## draw a new syst err : recalage
if(countrec == 25){
countrec = 1
syst = rnorm(1,0,1)*(0.068/1.96)  }
HmaxA$H[i] = Hmax
HmaxA$Date[i] = Dmax
##### before 1841
if(years[i] < 1841){
NoisyLimni[i,] = Hmax  +
## frequence releves (non-syst)
rexp(n = nspag, rate = lamb1)  +
## batillage (syst)
syst
##### after 1841
} else {
#### < 5m
if(LimniPt$H[i] < 5){
NoisyLimni[i,] = Hmax  +
## frequence releves (non-syst)
rexp(n = nspag, rate = lamb3)  +
## batillage (syst)
syst
#### > 5m
} else {
NoisyLimni[i,] = Hmax +
## frequence releves (non-syst)
rnorm(nspag,0,1)*(0.1/1.96) +
## batillage (syst)
syst
}
}
countrec = countrec+1
}
## Bard & Lang dike breaks corrections
# 1840 +/- 0.94
NoisyLimni[which(HmaxA$y == 1840),] = HmaxA$H[which(HmaxA$y == 1840)] + rnorm(nspag,0,0.94/1.96)
# 1856 +/- 0.4
NoisyLimni[which(HmaxA$y == 1856),] = HmaxA$H[which(HmaxA$y == 1856)] + rnorm(nspag,0,0.4/1.96)
# 1841 +/- 0.4
NoisyLimni[which(HmaxA$y == 1841),] = HmaxA$H[which(HmaxA$y == 1841)] + rnorm(nspag,0,0.94/1.96)
## Condition C4 flood Pichard before 1841
for(i in 1 : (1841-1816) ){
if ( HmaxA$H[i] < 7 & any(NoisyLimni[i,] > 7) ){
NoisyLimni[i,which(NoisyLimni[i,] > 7)] = 7
}
}
### Quantiles
HmaxA$min = round(apply(NoisyLimni,MARGIN = 1,quantile,probs = 0.025),2)
HmaxA$max = round(apply(NoisyLimni,MARGIN = 1,quantile,probs = 0.975),2)
HmaxA$med = round(apply(NoisyLimni,MARGIN = 1,median),2)
NoisyLimni = round(NoisyLimni,2)
### Pettitt
# pettitt.test(HmaxA$med)
# pettitt.test(HmaxA$max)
# pettitt.test(HmaxA$H)
# mk.test(HmaxA$med)
# mk.test(HmaxA$max)
### IC abs plot
IC_an = ggplot()+
labs(x = "Year", y = "AMAX stage & 95% conf. interval [m]") +
theme_bw(base_size=15)+
geom_ribbon(data = HmaxA,
aes(x = y, ymin = min, ymax=max,fill= "Confidence interval"))+
geom_line(data = HmaxA, aes(x = y, y = H),lwd=1)+
# geom_line(data = HmaxA, aes(x = y, y = med),lwd=1,col="red")+
theme(legend.position = "NULL")+
theme( axis.text=element_text(size=12)
,axis.title=element_text(size=14)
,legend.text=element_text(size=15)
,legend.title=element_text(size=15)
,legend.key.size=unit(1, "cm"))+
geom_line(data=HmaxA, aes(x=y, y = 5 ),col="red",lwd=1,lty=2)  +
geom_vline(aes(xintercept=1841),col="grey" ,lty=2,lwd = 1)+
coord_cartesian(ylim = c(2.5,10.5))
# IC_an
### IC rel plot
IC_perc = ggplot()+
labs(x = "Year", y = "95% conf. interval diff. to measured stage [m]") +
theme_bw(base_size=15)+
geom_ribbon(data = HmaxA,
aes(x = y, ymin = min-H, ymax=max-H, fill = "Confidence interval"))+
geom_line(data = HmaxA, aes(x = y, y = 0), lwd=1)+
geom_line(data = HmaxA, aes(x = y, y = med-H), col="red",lwd=1)+
theme(legend.position = "NULL")+
theme( axis.text=element_text(size=12)
,axis.title=element_text(size=14)
,legend.text=element_text(size=15)
,legend.title=element_text(size=15)
,legend.key.size=unit(1, "cm"))  +
geom_vline(aes(xintercept=1841),lwd=1, lty =2 , col="grey")
# coord_cartesian(ylim = c(2,10))
# IC_perc
ggarrange(IC_an,IC_perc,ncol = 1,align = "hv")
# ggsave(path = dir.plots, filename = "StageErrorAMAX_bcr.pdf",width = 10, height = 8)
###### NOISY RESTIT
NoisyRestit = matrix(ncol = nspag, nrow = nrow(MaxARestit))
for(i in 1:nrow(NoisyRestit)){
NoisyRestit[i,] = MaxARestit$h[i] +
#non-syst
rnorm(nspag,0,1)*(0.05/1.96) +
#syst, recalage every 6 month, new draw every year
rnorm(1,0,1)*(0.035)}
NoisyRestit = round(NoisyRestit,2)
HmaxA_Res = MaxARestit[,c(1,3,2)]
HmaxA_Res$min = round(apply(NoisyRestit,MARGIN = 1,quantile,probs = 0.025),2)
HmaxA_Res$max = round(apply(NoisyRestit,MARGIN = 1,quantile,probs = 0.975),2)
HmaxA_Res$med = round(apply(NoisyRestit,MARGIN = 1,median),2)
names(HmaxA_Res) = c("y","Date","H","min","max","med")
### IC abs plot
IC_an_res = ggplot()+
labs(x = "Year", y = "AMAX stage & 95% conf. interval [m]") +
theme_bw(base_size=15)+
geom_ribbon(data = HmaxA_Res,
aes(x = y, ymin = min, ymax=max,fill= "Confidence interval"))+
geom_line(data = HmaxA_Res, aes(x = y, y = H),lwd=1)+
# geom_line(data = HmaxA, aes(x = y, y = med),lwd=1,col="red")+
theme(legend.position = "NULL")+
theme( axis.text=element_text(size=12)
,axis.title=element_text(size=14)
,legend.text=element_text(size=15)
,legend.title=element_text(size=15)
,legend.key.size=unit(1, "cm"))
#coord_cartesian(ylim = c(2.5,10.5))
# IC_an_res
HmaxA$st = as.factor("Pt")
HmaxA_Res$st = as.factor("Res")
BothMax = rbind(HmaxA,
c(1968,NA,NA,NA,NA),
c(1969,NA,NA,NA,NA),
c(1970,NA,NA,NA,NA),
HmaxA_Res)
### IC abs plot
IC_an_both = ggplot()+
labs(x = "Year", y = "AMAX stage & 95% conf. interval [m]") +
theme_bw(base_size=15)+
geom_ribbon(data = BothMax,
aes(x = y, ymin = min, ymax=max,fill= st))+
geom_line(data = BothMax, aes(x = y, y = H, color = st),lwd=0.7)+
scale_color_manual(values = c("red","blue"))+
# scale_fill_manual(values = ("deepskyblue"))+
# geom_line(data = HmaxA, aes(x = y, y = med),lwd=1,col="red")+
theme(legend.position = "NULL")+
theme( axis.text=element_text(size=12)
,axis.title=element_text(size=14)
,legend.text=element_text(size=15)
,legend.title=element_text(size=15)
,legend.key.size=unit(1, "cm"))+
geom_vline(aes(xintercept=1841), lwd = 1, lty = 2)+
geom_vline(aes(xintercept=c(1968,1969,1970)), lwd = 4, col = "lightgrey")+
geom_line(data=data.frame(x=1816:1841,y=7),aes(x=x,y=y))+
geom_line(data=data.frame(x=1841:1967,y=5),aes(x=x,y=y))
#coord_cartesian(ylim = c(2.5,10.5))
# IC_an_both
### IC rel both
IC_rel_both = ggplot()+
labs(x = "Year", y = "95% conf. interval diff. to measured stage [m]") +
theme_bw(base_size=15)+
geom_ribbon(data = BothMax,
aes(x = y, ymin = min-H, ymax=max-H, fill = st))+
geom_line(data = BothMax, aes(x = y, y = 0), lwd=1)+
geom_line(data = BothMax, aes(x = y, y = med-H, color = st),lwd=1)+
scale_color_manual(values=c("red","blue"))+
theme(legend.position = "NULL")+
theme( axis.text=element_text(size=12)
,axis.title=element_text(size=14)
,legend.text=element_text(size=15)
,legend.title=element_text(size=15)
,legend.key.size=unit(1, "cm"))  +
geom_vline(aes(xintercept=1841), lwd = 1, lty = 2)+
geom_vline(aes(xintercept=c(1968,1969,1970)), lwd = 4, col = "lightgrey")
# coord_cartesian(ylim = c(2,10))
# IC_rel_both
ggarrange(IC_an_both,IC_rel_both,ncol = 1,align = "hv")
# ggsave(path = dir.plots, filename = "StageErrorAMAX_BOTH.pdf",width = 10, height = 8)
### Save
dir.create(paste0(dir.res,"Limni/"))
dir.limni = paste0(dir.res,"Limni/")
names(HmaxA_Res) = c("Y","Date","Hmes","Hinf","Hsup","Hmed")
names(HmaxA_Res) = c("Y","Date","Hmes","Hinf","Hsup","Hmed")
write.table(HmaxA[,(1:6)],paste0(dir.limni,"amaxH_Pt.txt"),row.names = F)
write.table(HmaxA[,(1:6)],paste0(dir.limni,"amaxH_Res.txt"),row.names = F)
write.table(NoisyLimni,paste0(dir.limni,"NoisyHmaxAn_Pt.txt"), row.names = F, col.names = F)
write.table(NoisyRestit,paste0(dir.limni,"NoisyHmaxAn_Res.txt"), row.names = F, col.names = F)
rm(list=ls())
dev.off()
source("C://Users/mathieu.lucas/Desktop/PropagMaxAn/Codes/dirs.R")
source(paste0(dir.codes,"module_BaRatin.r"))
source(paste0(dir.codes,"Fun_SPD.r"))
start.time = Sys.time()
case = "Pt"
dir.spd = paste0(dir.bam,"SPD_",case)
######################################
############ DATA LOADING ############
######################################
Amax = read.table(paste0(dir.res,"Limni/amaxH_Pt.txt"),header = T)
Noisy = as.matrix(read.table(paste0(dir.res,"Limni/NoisyHmaxAn_Pt.txt")))
Gau = read.table(paste0(dir.data,"GauPtBcrWperiods.txt"),header=T)
#Shifts from segmentation : col 2 = greatest flood within post. dates.
#As indices from 1st day of limni
TshiftsPt = as.Date("1816-05-15")+read.table(paste0(dir.data,"shift_timesPt.txt"),header=T)[,2]
######################################
########## DATA FORMATTING ###########
######################################
# add 1840 flood as a timeshift
Tshifts = c(as.Date("1840-11-02"),TshiftsPt)
nperiod = length(Tshifts) + 1
# identifiying the period of maxAn stages
Amax$Date = ymd(Amax$Date) ; nyears = nrow(Amax) ; Amax$period = 1
for(shift in 1:length(Tshifts)){ Amax$period[which(Amax$Date >= Tshifts[shift])] = shift + 1 }
#no gaugings in period 1 : before 1840
Gau$Period = Gau$Period + 1
######################################
######### PRIORS DEFINITION ##########
######################################
# 1. Define number of controls, periods and MonteCarlo samples
ncontrol = 2; nsim = 1000 ; RunSPD = F ; nspag = ncol(Noisy)
# 2. Define which parameters are varying in parameterization (b1,a1,c1,b2,a2,c2)
isVar=c(T,F,F,T,F,F)
# 3. Define parameter names and prior distributions for b,a,c (of any control)
names.bac=c('b','a','c')
margins.bac=c('Gaussian','LogNormal','Gaussian')
#---------------------------------------
# Define priors on "physical" parameters
#---------------------------------------
# Priors are defined through Monte Carlo samples
# 1. Priors for low-flow control (control 1)
b1<-rnorm(nsim,mean=-4,sd=0.5) # weir activation stage
c1<-rnorm(nsim,mean=5/3,sd=0.025) # exponent
Bc1<-rlnorm(nsim,meanlog=log(300),sdlog=as.numeric(Transf_Gauss_lognorm(300,50)[2])) # channel width
KS1<-rlnorm(nsim,meanlog=log(35),sdlog=as.numeric(Transf_Gauss_lognorm(35,5)[2])) # Strickler coefficient
S01<-rlnorm(nsim,meanlog=log(1.5e-4),sdlog=as.numeric(Transf_Gauss_lognorm(1.5e-4,9e-5)[2])) # slope
# 2. Priors for main channel (control 2)
b2<-rnorm(nsim,mean=2,sd=0.5) # channel bed stage
c2<-rnorm(nsim,mean=5/3,sd=0.025) # exponent
Bc2<-rlnorm(nsim,meanlog=log(500),sdlog=as.numeric(Transf_Gauss_lognorm(500,50)[2])) # channel width
KS2<-rlnorm(nsim,meanlog=log(30),sdlog=as.numeric(Transf_Gauss_lognorm(30,5)[2])) # Strickler coefficient
S02<-rlnorm(nsim,meanlog=log(2.6e-4),sdlog=as.numeric(Transf_Gauss_lognorm(2.6e-4,9e-5)[2])) # slope
# 4. Priors for incremental global changes
d.g<-matrix(rnorm(nsim*(nperiod-1),mean=0,sd=0.3),nrow=nsim,ncol=nperiod-1)
# 5. Priors for incremental local changes
d.l<-matrix(rnorm(nsim*(nperiod-1),mean=0,sd=0.3),nrow=nsim,ncol=nperiod-1)
# 6. Starting point for all parameters
start=list(
b1=-4,c1=5/3,Bc1=300,KS1=35,S01=1.5e-4,  # control 1
b2= 2,c2=5/3,Bc2=500,KS2=30,S02=2.6e-4, # control 2
d.l=rep(0,nperiod-1),     # incremental local changes d.l
d.g=rep(0,nperiod-1)      # incremental global changes d.g
)
M                 = matrix(0, ncontrol, ncontrol)  #matrix of controls:
M[1,]             = c(1,0)   # control section (rectangular weir in critical condition)
M[2,]             = c(1,1)   # main control channel (rectangular wide channel in uniform condition)
Hmax = 10 # by default, 10 but be careful
#---------------------------------------
# Perform Monte-Carlo propagation
#---------------------------------------
MC=propagate_Bcr_b1b2reversed(b1,c1,Bc1,KS1,S01,  # control 1: rectangular weir
b2,c2,Bc2,KS2,S02, # control 2: lrectangular weir
d.g,d.l,           # global and local incremental changes
start              # starting vector
)
#plot priors verif
boxplot(MC$sim,ylim=c(-10,10))
#---------------------------------------
# Fit prior distribution on MC samples
#---------------------------------------
# define marginal prior distributions and parameter names
margins=c();names=c();k=0
for(i in 1:ncontrol){
for(j in 1:3){
k=k+1
if(isVar[k]){
margins=c(margins,rep(margins.bac[j],nperiod))
names=c(names,paste(names.bac[j],i,'_',1:nperiod,sep=''))
}else{
margins=c(margins,margins.bac[j])
names=c(names,paste(names.bac[j],i,sep=''))
}
}
}
# fit multivariate prior distribution
prior=fit(MC$sim,margins,names)
#Remnant error model:
#--------------------
#LINEAR: err = g1+g2*Q   or    CONSTANT: err = g1):
remnant.err.model = "Linear"              #"Linear" or "Constant"
g1.prior          = c(0, 1000, 0.1)       #c(min,max, starting point)
g2.prior          = c(0, 100, 0.1)        #c(min,max, starting point) or c(mean, stdev, starting point)
#if model = "Constant" then put FALSE !.
g1.distr.type     = "Uniform"             #  "Uniform.
g2.distr.type     = "Uniform"             # "Lognormal" or "Uniform
######################################
############ BARATIN SPD #############
######################################
#dir for SPD
dir.create(dir.spd,showWarnings = F) ; setwd(dir.spd)
#write gau
write.table(Gau,"Gaugings_data.txt",row.names = F)
# write config files
colperiod=4 # columns where period will be stored in BaM data file
writeConfigFilesSPD(prior = prior,start = MC$start,ncontrol = ncontrol,
nperiod = nperiod,colperiod = colperiod,isVar = isVar)
##write config BAM
BaRatin_SPD_config(dir.BaM = dir.bam,
dir.SPD.config = dir.spd,
dir.spd.short = paste0("SPD_",case,"/"),
pred = F,
nobs = nrow(Gau),
M = M,
remnant = remnant.err.model,
g1.prior = g1.prior, g2.prior = g2.prior,
g1.distr.type = g1.distr.type, g2.distr.type = g2.distr.type,
Ncycles = 1000,
Hmax = Hmax)
# setwd(dir.bam) useful ?
if(RunSPD == T){system2(paste0(dir.bam,"BaM.exe"))}
dir.bam
case
paste0(dir.res,case)
#dir for results
dir.res.case = paste0(dir.res,case,"/")
dir.create(dir.res.case)
dir.BaM
dir.spd
file.path(dir.spd,"/Results_MCMC_Cooked.txt")
dir.res.case
dir.create(paste0(dir.res.case,"/SPD/"))
dir.plots
paste0(dir.plots,"SPD/")
nperiod
Hinf
View(Gau)
ncontrol
