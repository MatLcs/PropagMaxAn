vertical.length = length(names)*4
mcmc = MCMCplot(doLogPost = T,
doPar     = T,
doDPar    = T,
MCMCfile  = paste0(dir.res.case,"/SPD/Results_MCMC_Cooked.txt") ,
type      = "trace",  #="trace", # "histogram","density","scatterplot"
xlab      = '',
ylab      = '',
ncol      = 1,
prior     = NULL,
burn      = 0,
slim      = 1,
theme_size= 15)
# ggsave(mcmc, filename =paste(workspace,"/mcmc_it",iter,".png", sep=""),
#        bg = "transparent", width = 12, height =vertical.length, dpi = 100)
mcmc2 = MCMCplot(doLogPost = T,
doPar     = T,
doDPar    = T,
MCMCfile  =  paste0(dir.res.case,"/SPD/Results_MCMC_Cooked.txt")  ,
type      = 'density',
prior     = model$par,
xlab      = '',
ylab      = '',
ncol      = 1,
burn      = 0,
slim      = 1,
theme_size= 15)
# ggsave(mcmc2, filename =paste(workspace,"/mcmc2_it",iter,".png", sep=""),
# bg = "transparent", width = 12, height =vertical.length, dpi = 100)
dir.create(paste0(dir.plots,"/",case,"/"),showWarnings = F)
dir.plot.case = paste0(dir.plots,"/",case,"/")
dir.create(paste0(dir.plot.case,"SPD/"),showWarnings = F)
pdf(paste0(dir.plot.case,"/SPD/mcmc.pdf"), 17, vertical.length, useDingbats=F)
print(plot_grid(mcmc, mcmc2, nrow=1, ncol = 2,
labels = c("Trace plots", "Density plots"),label_size = 20) )
dev.off()
rm(mcmc);  rm(mcmc2); rm(model)
######################################
############ PLOT RC's ###############
######################################
message("--------------------------")
message("PLOTTING SPD RC's RESULTS")
message("--------------------------")
# read SPD results
data.MCMC.spd = as.matrix(read.table(paste0(dir.spd,"/Results_MCMC_Cooked.txt"),
header=TRUE,dec=".", sep=""))
data.MP.spd = tail(data.frame(read.table(paste0(dir.spd,"/Results_Summary.txt"),
row.names = 1, dec=".",sep="")),1)
nsample = length(data.MCMC.spd[,1])
min.grid = min(data.MCMC.spd[,1])
Hinf = -4;  Hsup = 15
Hgrid  = seq(Hinf, Hsup, 0.01)
ngrid = length(Hgrid)
#colors
RCcol = c("#a50026","#d73027","#f46d43","#fdae61","#fee090","#e0f3f8","#abd9e9","#74add1",
"#4575b4","#313695")
#init
RCs = list()
DatasRC = list()
for(periode in 1:nperiod){
GauPer = Gau[which(Gau$Period==periode),]
# if (periode != nperiod){
cook=data.MCMC.spd[,c(paste0("b1_",periode),"a1","c1", #bac1
paste0("b2_",periode),"a2","c2", #bac2
"b3","a3","c3",
"Y1_gamma1","Y1_gamma2","LogPost",#y & logpost
paste0("k1_",periode),paste0("k2_",periode),paste0("k3_",periode),#ks
paste0("ktype1_",periode),paste0("ktype2_",periode),paste0("ktype3_",periode) #ktypes
)]
cookmp  = data.MP.spd[,c(paste0("b1_",periode),"a1","c1", #bac1
paste0("b2_",periode),"a2","c2", #bac2
"b3","a3","c3",   #bac3
"Y1_gamma1","Y1_gamma2",#y & logpost
paste0("k1_",periode),paste0("k2_",periode),paste0("k3_",periode),#ks
paste0("ktype1_",periode),paste0("ktype2_",periode),paste0("ktype3_",periode) #ktypes
)]
# } else {
#   cook=data.MCMC.spd[,c(paste0("b1_",periode),"a1","c1", #bac1
#                         paste0("b2_",periode),"a2","c2", #bac2
#                         #paste0("b3_",periode),"a3","c3", #bac3
#                         "Y1_gamma1","Y1_gamma2","LogPost",#y & logpost
#                         paste0("k1_",periode-1),paste0("k2_",periode-1),#paste0("k3_",periode),#ks
#                         paste0("ktype1_",periode-1),paste0("ktype2_",periode-1)
#                         #,paste0("ktype3_",periode) #ktypes
#   )]
#   cookmp  = data.MP.spd[,c(paste0("b1_",periode),"a1","c1", #bac1
#                            paste0("b2_",periode),"a2","c2", #bac2
#                            #paste0("b3_",periode),"a3","c3", #bac3
#                            "Y1_gamma1","Y1_gamma2",#y & logpost
#                            paste0("k1_",periode-1),paste0("k2_",periode-1),
#                            #paste0("k3_",periode),#ks
#                            paste0("ktype1_",periode-1),paste0("ktype2_",periode-1)
#                            #,paste0("ktype3_",periode) #ktypes
#   )]
# }
MCMC.save    =  matrix(NA, nrow = nsample, ncol = ncol(cook))
MaxPost.save =  matrix(NA, nrow = 1,  ncol = ncol(cook)-1)
MCMC.save = cbind(cook, rep(1, nsample))
MaxPost.save = as.numeric(c(cookmp,1))
RC.Post    =  apply(MCMC.save,MARGIN = 1,  RC_controls,h = Hgrid,  M = M, ncontrols = ncontrol)
RC.MaxPost =  RC_controls_mp(theta = as.numeric(MaxPost.save),h=Hgrid,M=M,ncontrols = ncontrol)
data.tmp            = apply(RC.Post, MARGIN=1, quantile, probs=c(0.025,0.975), na.rm=TRUE)
data.tmp            = apply(data.tmp, MARGIN=c(1,2), function(x){ifelse(x<0,0,x)})
List.RC.quants      = data.frame(cbind(Hgrid, t(data.tmp),  RC.MaxPost))
rm(data.tmp)
colnames(List.RC.quants) = c("h", "inf", "sup", "maxpost")
# data.RC = List.RC.quants
# DatasRC[[periode]] = data.RC
DatasRC[[periode]] = List.RC.quants
}
## data for plot
DatPlot = data.frame(List.RC.quants[0,])
for(per in 1:nperiod){
DatPlot = rbind(DatPlot,cbind(round(DatasRC[[per]],2),rep(per,length(DatasRC[[per]]$h))))  }
names(DatPlot) = c('h','inf','sup','maxpost','period')
write.table(DatPlot,paste0(dir.res.case,"/SPD/DataRCs.txt"))
### PLOTS RC
DataRC = DatPlot
rm(DatPlot)
DataRC = DataRC[which(is.na(DataRC$maxpost)==F  & DataRC$maxpost > 0),]
DataRC$period=as.factor(DataRC$period)
Gau$Period=as.factor(Gau$Period)
plot.RC=ggplot(DataRC)+
#RC's
geom_smooth(aes(x=h,y=maxpost,ymax=sup,ymin=inf,colour=period),size=1,stat='identity',alpha=0.2)+
geom_path(aes(x=h,y=maxpost,colour=period),size=1.5)+
### Gaugings
geom_linerange(aes(x=h,ymax=Q+2*uQ,ymin=Q-2*uQ,colour=Period),data=Gau,size=1)+
geom_point(aes(x=h,y=Q,colour=Period),data=Gau,na.rm=T,shape=16,size=3)+
### Labels
xlab(expression(paste("Stage [m]",sep="")))+
ylab(expression(paste("Discharge [",m^3,".",s^-1,"]",sep="")))+
labs(colour = "Period")+
scale_fill_brewer(type = "div",palette = 5,aesthetics = "color")+
coord_cartesian(ylim=c(500,15000),xlim=c(-2,10))+
### Theme
theme_bw(base_size=20)+
theme(axis.text=element_text(size=15),axis.title=element_text(size=20,face="bold")
,panel.grid.major=element_line(size=1.2),panel.grid.minor=element_line(size=0.8)
,legend.text=element_text(size=15),legend.title=element_text(size=20)
,legend.key.size=unit(1.5, "cm"),legend.position="right")
## Normal scale
pdf(paste(dir.plot.case,"SPD/RC.pdf",sep=""),12,7,useDingbats=F)
print(plot.RC)
dev.off()
## Logarithmic scale
ylim.wind=c(200,14000);xlim.wind=c(-2,10)
pdf(paste(dir.plot.case,"SPD/RClog.pdf",sep=""),12,7,useDingbats=F)
print(plot.RC+
scale_y_log10()+
coord_cartesian(ylim=ylim.wind,xlim=xlim.wind))
dev.off()
## with IC
IC=ggplot(DataRC)+
geom_ribbon(aes(x=h,ymax=((sup-maxpost)/maxpost)*100,ymin= ((inf-maxpost)/maxpost)*100,
colour=period,fill = period),size=0.6,stat='identity',alpha=0.2)+
scale_fill_brewer(type = "div",palette = 5,aesthetics = c("colour","fill"))+
coord_cartesian(ylim=c(-100,100), xlim = xlim.wind)+
### Theme
theme_bw(base_size=20)+
theme(axis.text=element_text(size=15),axis.title=element_text(size=20,face="plain")
,panel.grid.major=element_line(size=1.2),panel.grid.minor=element_line(size=0.8)
,legend.text=element_text(size=15),legend.title=element_text(size=20)
,legend.key.size=unit(1.5, "cm"),legend.position="none")+
ylab("Relative uncertainty [%]")+
xlab("Stage [m]")
ggarrange(plot.RC+
scale_y_log10()+
coord_cartesian(ylim=ylim.wind,xlim=xlim.wind)+
theme(axis.title.x = element_blank()),
IC,
ncol = 1,align = "v",common.legend = T, legend = "right",
heights = c(2.5,1))
ggsave(filename = "RClog_ICdown.pdf",path = paste0(dir.plot.case,"SPD/"), width = 12, height = 10)
#### all param boxplot
prior.bs = MC$sim[,c(1:nperiod,(nperiod+3):(2*nperiod+2))]
post.bs = data.frame(tail(data.MCMC.spd[,c(1:nperiod,(nperiod+3):(2*nperiod+2))],1000))
names(prior.bs) = names(post.bs)# = names(MC$sim)[c(1:nperiod,(nperiod+3):(2*nperiod+2))]
prior= melt(prior.bs)
post = melt(post.bs)#[,(2:3)]
#ind for periods
periodsim= rep(NA,(nsim*nperiod)*2)
periodsim[1:1000] = 1
for(per in 2:(nperiod*2)) {
if(per <= nperiod) {periodsim[(((per-1)*nsim)+1):(per*nsim)] = per
} else {periodsim[(((per-1)*nsim)+1):(per*nsim)] = per-nperiod}  }
#factors
prior$per = as.factor(periodsim)
post$per = as.factor(periodsim)
prior$type = as.factor("Prior")
post$type = as.factor("Posterior")
# names(post) = names(prior)
ParamsBoxplot = rbind(prior,post)
### B's
boxbs=ggplot(data=ParamsBoxplot)+
geom_boxplot(aes(x=variable,y=value,fill=type),colour="black",width=1)+
facet_grid(~per,scales="free",labeller = label_parsed)+
ylab("Offset [m]")+
theme_bw(base_size=20)+
labs(fill = "")+
theme(axis.title.x = element_blank(),
axis.text=element_text(size=30),axis.title=element_text(size=30,face="bold")
,legend.text=element_text(size=5),legend.title=element_text(size=20)
,legend.key.size=unit(1.5, "cm"),legend.position="none" #"right"
,strip.text.x=element_text(size = 30,face="bold"))+
scale_x_discrete(breaks=c("b1_1","b2_1",
"b1_2","b2_2",
"b1_3","b2_3",
"b1_4","b2_4",
"b1_5","b2_5",
"b1_6","b2_6",
"b1_7","b2_7",
"b1_8","b2_8",
"b1_9","b2_9",
"b1_10","b2_10",
"b1_11","b2_11"),
labels=c(bquote(b[1]^(1)),bquote(b[2]^(1)),
bquote(b[1]^(2)),bquote(b[2]^(2)),
bquote(b[1]^(3)),bquote(b[2]^(3)),
bquote(b[1]^(4)),bquote(b[2]^(4)),
bquote(b[1]^(5)),bquote(b[2]^(5)),
bquote(b[1]^(6)),bquote(b[2]^(6)),
bquote(b[1]^(7)),bquote(b[2]^(7)),
bquote(b[1]^(8)),bquote(b[2]^(8)),
bquote(b[1]^(9)),bquote(b[2]^(9)),
bquote(b[1]^(10)),bquote(b[2]^(10)),
bquote(b[1]^(11)),bquote(b[2]^(11))
))
pdf(paste(dir.plot.case,"b1-b2s_Restit.pdf",sep=""),16,10,useDingbats=F)
print(boxbs)
dev.off()
###### B3
priors.b3 = melt(MC$sim[,"b3"])
priors.b3$variable = as.factor("b3")
priors.b3$type = as.factor("Prior")
post.b3 = melt(data.frame(tail(data.MCMC.spd[,"b3"],1000)))
post.b3$type =as.factor("Posterior")
post.b3$variable = as.factor("b3")
b3s = rbind(priors.b3,post.b3)
boxb3s=ggplot(data=b3s)+
geom_boxplot(aes(x=variable,y=value,fill=type),colour="black")+
theme_bw(base_size=15)+
ylab("Offset [m]")+
theme(axis.text=element_text(size=25),axis.title=element_text(size = 25)
,panel.grid.major=element_line(size=1),panel.grid.minor=element_line(size=0.8)
,legend.text=element_text(size=15),legend.title=element_blank()
,legend.key.size=unit(1.5, "cm"),legend.position="none"
,axis.title.x=element_blank())+
scale_x_discrete(breaks=c("b3"),
labels=c(bquote(b[3])))
# boxb3s
###### A's
priors.as = melt(MC$sim[,c("a1","a2","a3")])
priors.as$type = as.factor("Prior")
post.as = melt(data.frame(tail(data.MCMC.spd[,c("a1","a2","a3")],1000)))#[,(2:3)]
post.as$type =as.factor("Posterior")
# names(post.as) = names(priors.as)
as = rbind(priors.as,post.as)
boxas=ggplot(data=as)+
geom_boxplot(aes(x=variable,y=value,fill=type),colour="black")+
theme_bw(base_size=15)+
theme(axis.text=element_text(size=25)#,axis.title=element_blank()
,panel.grid.major=element_line(size=1),panel.grid.minor=element_line(size=0.8)
,legend.text=element_text(size=20),legend.title=element_blank()
,legend.key.size=unit(1.5, "cm"),legend.position="bottom"
,axis.title.x=element_blank(), axis.title = element_text(size = 25))+
scale_x_discrete(breaks=c("a1","a2","a3"),
labels=c(bquote(a[1]),bquote(a[2]),bquote(a[3])))+
ylab("Value [-]")
# boxas
######## C's
priors.cs = melt(MC$sim[,c("c1","c2","c3")])
priors.cs$type = as.factor("Prior")
post.cs = melt(tail(data.MCMC.spd[,c("c1","c2","c3")],1000))[,(2:3)]
post.cs$type = as.factor("Posterior")
names(post.cs) = names(priors.cs)
cs = rbind(priors.cs,post.cs)
boxcs=ggplot(data=cs)+
geom_boxplot(aes(x=variable,y=value,fill=type),colour="black")+
theme_bw(base_size=15)+
theme(axis.text=element_text(size=25),axis.title=element_text(size = 25)
,panel.grid.major=element_line(size=1),panel.grid.minor=element_line(size=0.8)
,legend.text=element_text(size=20),legend.title=element_blank()
,legend.key.size=unit(1.5, "cm"),legend.position="none"
,axis.title.x=element_blank())+
scale_x_discrete(breaks=c("c1","c2","c3"),
labels=c(bquote(c[1]),bquote(c[2]),bquote(c[3])))+
ylab("Value [-]")
# boxcs
#
pdf(paste(dir.plot.case,"b3_as_cs_Restit.pdf",sep=""),15,7,useDingbats=F,onefile = F)
ggarrange(boxb3s,boxas,boxcs,legend = 'none',ncol = 3,align = "hv",common.legend = T)
dev.off()
######################################
### PROPAG U LIMNI VIA BAM PREDICT ###
######################################
message("----------------------------------------")
message("PROPAGATING U LIMNI VIA BAM PREDICTIONS")
message("---------------------------------------")
dir.create(dir.bar)
write.table(x = Hgrid,
file = paste0(dir.bar,"/Hgrid.txt"), col.names = F ,row.names = F, sep = "    ",)
#init matrix
Tot = matrix(nrow = length(Amax$Y),ncol = nspag)
Param = Tot
Mp = Tot
TrueMp = rep(NA,nrow(Tot))
for(period in 1:nperiod){
# period = 1
message(paste0("Processing period ",period," ....."))
#if no max An relies to current period, go to next period
if( length( which(Amax$period == period) ) < 1 ){period = period +1
} else {
bufferAn = which(Amax$period == period)
######### SPD results cleaning
#Folder period n
dir.create(file.path(dir.res.case,paste0("P",period)),showWarnings = F)
dir.per = file.path(dir.res.case,paste0("P",period))
# #Copy and rename SPD results file to period dir
cook = read.table(file.path(dir.res.case,"/SPD/Results_MCMC_Cooked.txt"),header=T)
#Cleaning SPD results to keep only the b of period n
### WARNING, to adapt to the different possibility of par var in SPD
cook=cook[c(paste0("b1_",period),"a1","c1", #bac1
paste0("b2_",period),"a2","c2", #bac2
"b3","a3","c3", #bac3
"Y1_gamma1","Y1_gamma2","LogPost",#y & logpost
paste0("k1_",periode),paste0("k2_",periode),paste0("k3_",periode),#ks
paste0("ktype1_",periode),paste0("ktype2_",periode),paste0("ktype3_",periode) #ktypes
)]
#Write the new cleaned result file
write.table(cook,file.path(dir.bar,"Results_MCMC_Cooked.txt"),
row.names = F,sep= "     ")
write.table(cook,file.path(dir.per,"Results_MCMC_Cooked.txt"),
row.names = F,sep= "     ")
############ Apply BaM prediction on the cleaned results file
# setwd(dirPer)
######## writing data in BaM folder for the current period
#### Writing
## Gaugings
write.table(x = apply(Gau[which(Gau$Period == period),(2:5)],MARGIN = 2, as.numeric),#,c(2,3,4,6)],
file = paste0(dir.bar,"/Gaugings_data.txt"), row.names = F, sep = "    ",)
# write.table(x = Gaugings[which(Gaugings$period == period),],#,c(2,3,4,6)],
#             file = paste0(dirPer,"/Gaugings_data.txt"), row.names = F, sep = "    ",)
nobs_gaug = nrow(Gau[which(Gau$Period == period),])
buffer=c(paste0("b1.",period),"a1","c1", #bac1
paste0("b2.",period),"a2","c2",#, #bac2
"b3","a3","c3") #bac3
priorP =  fit(MC$sim[c(paste0("b1.",period),"a1","c1", #bac1 #simulations
paste0("b2.",period),"a2","c2",
"b3","a3","c3")],#, #bac2
#paste0("b3.",period),"a3","c3")], #bac3
rep(margins.bac,ncontrol), #margins
c(paste0("b1_",period),"a1","c1", #bac1 #names
paste0("b2_",period),"a2","c2", #bac2
"b3","a3","c3") #bac3
)
#### Limni period n
AmaxP = Amax[which(Amax$period == period),3]
MatSpag = Noisy[which(Amax$period == period),]
Limnisize=length(AmaxP)
write.table(x = list(MatSpag),
file = paste0(dir.bar,"/limni.txt"), row.names = F,sep = "    ",col.names = F)
#################################################
# setwd(dir.bar)
#Baratin Config corrected to allow spagetti predict files & do not print BaM state
BaRatin_configNspagPeriod( dir               = dir.bar,
period            = period,
nperiod           = nperiod,
nsim              = nspag,#1000
prior             = priorP,
ncontrol          = ncontrol,
M                 = M,
nobs              = nobs_gaug,
Ncycles           = 1000,#100
ngrid             = ngrid,
nlimni            = length(AmaxP),
predictionRC      = T,#T
predictionQt      = T,#T
predictionPrior   = F,#T
simMCMC           = F,#T
mcmc.prior        = 100,#1000
remnant.err.model = remnant.err.model,
g1.prior          = g1.prior,
g2.prior          = g2.prior,
g1.distr.type     = g1.distr.type,
g2.distr.type     = g2.distr.type,
nspag = nspag, Hmax = Hmax, dir_code = dir.bam,
dir.bam.short = paste0("BaR_",case,"/"))
#Run BaM
message("***************************************************************"); flush.console()
message(c("Applying BaRatin to period!!!  Wait ... ")); flush.console()
message("***************************************************************"); flush.console()
setwd(dir.bam)
system2(paste0(dir.bam,"/BaM.exe"))
# save results in period folder
# #Mcmc files
# file.copy(from = file.path(dir.bar,list.files(dir.BaM,pattern = "Cooked" )),
#           to = file.path(dirSub,paste0(list.files(dir.BaM,pattern = "Cooked"),subp)), overwrite = T)
#pred config files
# file.copy(from = file.path(dir.BaM,list.files(dir.BaM,pattern = "Pred" )),
#           to = file.path(dirSub,paste0(list.files(dir.BaM,pattern = "Pred"),subp)), overwrite = T)
#Qt predictions
file.copy(from = file.path(dir.bar,list.files(dir.bar,pattern = "Qt" )),
to = file.path(dir.per,list.files(dir.bar,pattern = "Qt")), overwrite = T)
#RC predictions
file.copy(from = file.path(dir.bar,list.files(dir.bar,pattern = "Qrc" )),
to = file.path(dir.per,list.files(dir.bar,pattern = "Qrc")), overwrite = T)
#model
# file.copy(from = file.path(dir.bar,list.files(dir.bar,pattern = "Model" )),
#           to = file.path(dirSub,paste0(list.files(dir.BaM,pattern = "Model"),subp)), overwrite = T)
### period done
message(paste0("period : ",period,"    "))
### TOT U
Tot[bufferAn,] = as.matrix(round(read.table(paste0(dir.per,"/Qt_TotalU.spag"), header = F,),2)[,c(1:nspag)])
### PARAM U
Param[bufferAn,] = as.matrix(round(read.table(paste0(dir.per,"/Qt_ParamU.spag"), header = F,),2)[,c(1:nspag)])
### MAXPOST U (NOT THE REAL MAXPOST, 500 spag limni x 1 spag MAXPOST CT)
Mp[bufferAn,] = as.matrix(round(read.table(paste0(dir.per,"/Qt_Maxpost.spag"), header = F,),2)[,c(1:nspag)])
### REAL MAXPOST ???? 1 spag MP limni x 1 spag MP CT & fun
### maxpost limni = measured h
if(length(AmaxP)>1){TrueMp[bufferAn] = approx(x = Hgrid, y = DatasRC[[period]]$maxpost,
xout = apply(MatSpag,MARGIN = 1, median)    )$y
} else {TrueMp[bufferAn] = approx(x = Hgrid, y = DatasRC[[period]]$maxpost,
xout = median(MatSpag)    )$y}
}
}
message(paste0("Computation duration :", (Sys.time()-start.time), " min"))
AmaxQuants = data.frame(
an = Amax$Y,
### WARNING, NOT THE TRUE MP
# mp = apply(Mp,MARGIN = 1, median),
mp = TrueMp,
mp2.5 = apply(Mp,MARGIN = 1,quantile,probs=0.025,na.rm=T),
mp97.5 = apply(Mp,MARGIN = 1,quantile,probs=0.975,na.rm=T),
param2.5 = apply(Param,MARGIN = 1,quantile,probs=0.025,na.rm=T),
param97.5 = apply(Param,MARGIN = 1,quantile,probs=0.975,na.rm=T),
tot2.5 = apply(Tot,MARGIN = 1,quantile,probs=0.025,na.rm=T),
tot97.5 = apply(Tot,MARGIN = 1,quantile,probs=0.975,na.rm=T)
)
## Number of gaugings by each year
Gaudat = Gau
Gaudat$Y = year(Gaudat$Date)
Njau = 1971 : 2020
for(i in 1971 : 2020){Njau[i-1970] = length(which(Gaudat$Y==i))}
Njau[which(Njau==0)] = NA
ICreldif = ggplot()+
scale_x_continuous(name = expression("Year"), expand=c(0,2))+
scale_y_continuous(name = expression("Relative uncertainty for annual maximum discharges [%]"),
expand=c(0.1,0))+
labs(x = "Time [day]", y = "Relative uncertainty for annual maximum discharges [%]") +
theme_bw(base_size=15)+
geom_ribbon(data = AmaxQuants,
aes(x = an, ymin = ((tot2.5-mp)/mp)*100, ymax= ((tot97.5-mp)/mp)*100,#),
fill= "Remnant uncertainty"))+#, alpha = 0.5,show.legend = T)+
geom_ribbon(data = AmaxQuants,
aes(x = an, ymin = ((param2.5-mp)/mp)*100, ymax= ((param97.5-mp)/mp)*100,#),
fill= "Parametric uncertainty"), alpha = 0.9)+#, show.legend = T)+
geom_ribbon(data = AmaxQuants,
aes(x = an, ymin = ((mp2.5-mp)/mp)*100, ymax= ((mp97.5-mp)/mp)*100,#),
fill="Limnimetric uncertainty"))+#, alpha = 0.5,show.legend = T)+
geom_line(data = AmaxQuants, aes(x = an, y = 0))+
geom_vline(xintercept = year(Tshifts),show.legend = T)+
theme(legend.position = "right")+#,legend.text = element_text(size=8))+
scale_fill_manual(name = element_blank(),
values = c("#fec44f","#fa9fb5","#f03b20"))+
geom_point(aes(x = 1971 : 2020,y = 0,size = Njau),color='blue',alpha = 0.5)+
theme( axis.text=element_text(size=12)
,axis.title=element_text(size=16)
,legend.text=element_text(size=15)
,legend.title=element_text(size=15)
#,plot.margin=unit(c(0.5,0.5,0.5,0.5),"cm")
,legend.key.size=unit(1, "cm"))+
scale_size(range = c(1, 10), name="Gaugings / year")
# coord_cartesian(ylim = c(-30,70))
pdf(paste0(dir.plots,"/",case,"/ICrel_AMAX.pdf"),14)
print(ICreldif)
dev.off()
IC_Amax = ggplot()+
scale_x_continuous(name = expression("Year"), expand=c(0,2))+
scale_y_continuous(name = expression(paste("Annual maximum discharge [",m^3,".",s^-1,"]",sep="")),
expand=c(0.1,0))+
labs(x = "Time [day]", y = expression(paste("Annual maximum discharge [",m^3,".",s^-1,"]",sep=""))) +
theme_bw(base_size=15)+
geom_ribbon(data = AmaxQuants,
aes(x = an, ymin = tot2.5, ymax = tot97.5,#),
fill= "Remnant uncertainty"))+  #, alpha = 0.5,show.legend = T)+
geom_ribbon(data = AmaxQuants,
aes(x = an, ymin = param2.5, ymax = param97.5,#),
fill= "Parametric uncertainty"), alpha = 0.9)+#, show.legend = T)+
geom_ribbon(data = AmaxQuants,
aes(x = an, ymin = mp2.5, ymax = mp97.5,#),
fill="Limnimetric uncertainty"))+#, alpha = 0.5,show.legend = T)+
geom_line(data = AmaxQuants, aes(x = an, y = mp))+
geom_vline(xintercept = year(Tshifts),show.legend = T)+
theme(legend.position = "right")+#,legend.text = element_text(size=8))+
scale_fill_manual(name = element_blank(),
values = c("#fec44f","#fa9fb5","#f03b20"))+
theme( axis.text=element_text(size=12)
,axis.title=element_text(size=16)
,legend.text=element_text(size=15)
,legend.title=element_text(size=15)
,legend.key.size=unit(1, "cm"))
pdf(paste0(dir.plots,"/",case,"/IC_AMAX.pdf"),10)
print(IC_Amax)
dev.off()
######################################
#####  SAVE PROPAGATION RESULTS ######
######################################
write.table(round(AmaxQuants,2), paste0(dir.res.case,"Quantiles_AmaxRes.txt"),row.names = F)
write.table(round(Mp,2), paste0(dir.res.case,"MpSpagsAMAX_Res.txt"),row.names = F)
write.table(round(Param,2), paste0(dir.res.case,"ParamSpagsAMAX_Res.txt"),row.names = F)
write.table(round(Tot,2), paste0(dir.res.case,"TotSpagsAMAX_Res.txt"),row.names = F)
